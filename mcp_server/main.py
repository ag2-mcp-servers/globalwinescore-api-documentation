# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T00:33:56+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header
from pydantic import conint

from models import Color, Ordering, WineId

app = MCPProxy(
    contact={'x-twitter': 'GlobalWineScore'},
    description='\n\nThe GlobalWineScore API is designed as a RESTful API, providing several resources and methods depending on your usage plan.\n\nFor further information please refer to <a href="https://www.globalwinescore.com/plans" target="_blank">our plans</a>.\n\n# Authentication\nThe API uses token-based authentication.\nIn order to authenticate your requests, you need to include a specific header in each of your requests:\n\n```\nAuthorization: Token {YOUR-API-TOKEN}\n```\nThe word <b>Token</b> must be written. Your requests must also use the <b>HTTPS</b> protocol.\n\nIf you don\'t have a token yet, you need to apply for one [here](https://www.globalwinescore.com/api/).\n\nYour personal token can be found under the <a href="https://www.globalwinescore.com/account/api/" target="_blank">My account > API</a> section of the GlobalWineScore website\n\n# Format\nThe API provides several rendering formats which you can control using the `Accept` header or `format` query parameter.\n\n- JSON (default): no header or `Accept: application/json`\n- XML: `Accept: application/xml`\n# Rate limiting\nFor API requests, the rate limit allows for up to 10 requests per minute.\n\n# Error handling\n\nWhether a request succeeded is indicated by the HTTP status code. A 2xx status code indicates success, whereas a 4xx status code indicates failure.\n\nWhen a request fails, the response body is still JSON, but always contains a `detail` field with a description of the error, which you can inspect for debugging.\n\nFor example, trying to access the API without proper authentication will return code 403 along with the message:\n\n`{"detail": "Authentication credentials were not provided."}`\n\nFound a bug ? send us an email at <a href="mailto:api@globalwinescore.com">api@globalwinescore.com</a>\n\n# Ordering\n\nAt the moment, GlobalWineScores may be sorted by `date` and `score`. Use "-"\nto sort in descending order.\n\n# Continuous synchronization\n\nIf you need to synchronize your database with our API, you can query our API using `?ordering=-date` to get the newest scores first, which means you won\'t have to crawl the whole catalog every time :-)\n\n# Quick search interface\nIf you need to search our catalog (e.g. to align it with yours), we\'re providing you with a handy interface accessible here: <a href="https://api.globalwinescore.com/search/" target="_blank">https://api.globalwinescore.com/search/</a>\n\nYou need to be logged in (email/password) to access this page, but other than that you can share it with anyone in your team and start searching right away !\n\n# Resources\n\nThe details about available endpoints can be found below.\nYou can click on each endpoint to find information about their parameters.\n',
    title='GlobalWineScore API Documentation',
    version='8234aab51481d37a30757d925b7f4221a659427e',
    servers=[{'url': 'https://api.globalwinescore.com'}],
)


@app.get(
    '/globalwinescores/',
    description=""" Returns all available GWS """,
    tags=['wine_score_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_historical_g_w_s(
    authorization: Optional[str] = Header(None, alias='Authorization'),
    wine_id: Optional[WineId] = None,
    vintage: Optional[str] = None,
    color: Optional[Color] = None,
    is_primeurs: Optional[bool] = False,
    lwin: Optional[str] = None,
    lwin_11: Optional[str] = None,
    limit: Optional[conint(ge=0)] = 100,
    offset: Optional[conint(ge=0)] = None,
    ordering: Optional[Ordering] = '-date',
):
    """
    List all historical GWS
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/globalwinescores/latest/',
    description=""" Returns the latest GWS available per wine/vintage. """,
    tags=['wine_score_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_globalwinescores_latest_(
    authorization: Optional[str] = Header(None, alias='Authorization'),
    wine_id: Optional[WineId] = None,
    vintage: Optional[str] = None,
    color: Optional[Color] = None,
    is_primeurs: Optional[bool] = False,
    lwin: Optional[str] = None,
    lwin_11: Optional[str] = None,
    limit: Optional[conint(ge=0)] = 100,
    offset: Optional[conint(ge=0)] = None,
    ordering: Optional[Ordering] = '-date',
):
    """
    List all latest GWS
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
